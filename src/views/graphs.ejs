<script src="https://cdn.jsdelivr.net/npm/vue@2.6.14"></script>
<script src="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>
<script src='/socket.io/socket.io.js'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsrender/0.9.90/jsrender.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const socket = io();
    var globalChartArray = [];
    var resetGraph = [false, false, false, false];
    const graphOptions = ['time', 'temp', 'field', 'Vx1', 'Vy1', 'freq1', 'Vx2', 'Vy2', 'freq2'];

    if (sessionStorage.log === undefined) {
        sessionStorage.setItem('log', '');
    }
    if (sessionStorage.settingOptions === undefined) {
        sessionStorage.setItem('settingOptions', JSON.stringify(
            {
                lineColor: '#B34E4F',
                pointColor: '#E56465',
                lineWidth: 3,
                pointRadius: 5,
                lineStyle: [],
                pointStyle: 'circle'
            }
        ))
    }
    if (sessionStorage.logHtml === undefined) {
        sessionStorage.setItem('logHtml', "<ul id=\'messages\' style=\'list-style-type: none;\'></ul>");
    }
</script>

<script>
    function checkResetData(data) {
        if (data.length > 500) {
            resetGraph = [true, true, true, true];
            socket.emit('reset-time');
        }
    }

    function instantiateChartOptions() {
        var chart_opt = []
        for (var i in [...Array(4).keys()]) {
            chart_opt.push(new Object({
                selectedX: null,
                selectedY: null,
                optionsX: [{ value: null, text: 'Select X Axis' }].concat(graphOptions.map(function (e) { return { value: e, text: e } })),
                optionsY: [{ value: null, text: 'Select Y Axis' }].concat(graphOptions.map(function (e) { return { value: e, text: e } }))
            }))
        }
        chart_opt[0].selectedX = 'time';
        chart_opt[0].selectedY = 'temp';
        chart_opt[1].selectedX = 'time';
        chart_opt[1].selectedY = 'field';
        return chart_opt
    }

    function renderGraph(chart, dataDict, axisX, axisY, chart_index) {
        chart.data.datasets[0].data = dataDict;
        chart.options.parsing.xAxisKey = axisX;
        chart.options.parsing.yAxisKey = axisY;
        chart.options.scales.y.title.text = axisY;
        chart.options.scales.x.title.text = axisX;

        // specific options for axisX = time
        if (axisX === 'time') {
            chart.options.showLine = true;
            if (dataDict.length > 1)
                chart.options.scales.x.max = dataDict.length - 1;
            else
                chart.options.scales.x.max = 1;
        } else {
            chart.options.scales.x.max = null;
            chart.options.showLine = false;
        }
        chart.update();
    }

    function renderGraphOptions(chart, chartOptions) {
        chart.options.elements.line.borderColor = chartOptions["lineColor"];
        chart.options.elements.line.borderWidth = chartOptions["lineWidth"];
        chart.options.elements.point.backgroundColor = chartOptions["pointColor"];
        chart.options.elements.point.radius = chartOptions["pointRadius"];
        chart.options.elements.point.pointStyle = chartOptions["pointStyle"];
        chart.options.elements.line.fill = chartOptions["lineStyle"].includes("filled");
        if (chartOptions["lineStyle"].includes("dashed")) {
            chart.options.elements.line.borderDash = [5, 5];
        } else {
            chart.options.elements.line.borderDash = [0, 0];
        }
        chart.update();
    }

    socket.on('datapacket', function (data) {
        console.log(data);
        if (data != null) {
            checkResetData(data);
            for (var i in [...Array(4).keys()]) {
                window.app.updateGraph(i, data);
            }
        }
    })

    socket.on('started-recording', function (id) {
        sessionStorage.objectID = id;
        sessionStorage.recording = 'true';
        t = window.app.time.split(":");
        window.app.log(`Recording data for ${t[0]} hour(s) ${t[1]} minute(s) ${t[2]} second(s)`);
    })

    socket.on('stopped-recording', function (opt) {
        if (opt == 1) {
            sessionStorage.recording = 'false';
            window.app.log('Stopped Recording...')
        }
        else {
            sessionStorage.recording = 'false';
            window.app.log('Finished Recording')
        }
    })

</script>

<div id="app" class="app">
    <b-navbar toggleable="lg" type="dark" variant="dark">
        <b-navbar-brand href="#">ControlPanel</b-navbar-brand>
        <b-collapse id="nav-collapse" is-nav>
            <b-navbar-nav>
                <b-nav-item href="/home">Home</b-nav-item>
                <b-nav-item href="/graphs">Graphs</b-nav-item>
            </b-navbar-nav>

            <!-- Right aligned nav items -->
            <b-navbar-nav class="ml-auto">
                <b-nav-item-dropdown right>
                    <template #button-content>
                        <em>
                            <%= name %>
                        </em>
                    </template>
                    <b-nav-item @click="logout">Sign Out</b-nav-item>
                    <b-nav-item @click="googledrive">Google Drive</b-nav-item>
                </b-nav-item-dropdown>
            </b-navbar-nav>
        </b-collapse>
    </b-navbar>

    <b-container class="graphs-container">
        <b-jumbotron header="Graphs" lead="Chart.js graphs for PPMS and SR860 Lock-in">
            <hr class="my-4">
            <b-button variant="danger" @click="resetGraph">Reset</b-button>
            <b-button variant="primary" v-b-modal.modal-controls>Controls</b-button>
        </b-jumbotron>

        <b-modal id="modal-controls" size="lg" centered title="Controls">
            <b-container class="data-row">
                <b-row class="text-center">
                    <b-col>
                        <b-row>
                            <b-col class="text-left">
                                <h5>Chart 1</h5>
                            </b-col>
                            <b-col class="text-right">
                                <b-button size="sm" @click="resetZoom(0)">üè†</b-button>
                            </b-col>
                        </b-row>
                        <b-form-select v-model="chartOptions[0].selectedX" :options="chartOptions[0].optionsX"
                            @change="updateGraph"></b-form-select>
                        <b-form-select v-model="chartOptions[0].selectedY" :options="chartOptions[0].optionsY"
                            @change="updateGraph"></b-form-select>
                    </b-col>
                    <b-col>
                        <b-row>
                            <b-col class="text-left">
                                <h5>Chart 2</h5>
                            </b-col>
                            <b-col class="text-right">
                                <b-button size="sm" @click="resetZoom(1)">üè†</b-button>
                            </b-col>
                        </b-row>
                        <b-form-select v-model="chartOptions[1].selectedX" :options="chartOptions[1].optionsX"
                            @change="updateGraph"></b-form-select>
                        <b-form-select v-model="chartOptions[1].selectedY" :options="chartOptions[1].optionsY"
                            @change="updateGraph"></b-form-select>
                    </b-col>
                    <b-col>
                        <b-row>
                            <b-col class="text-left">
                                <h5>Chart 3</h5>
                            </b-col>
                            <b-col class="text-right">
                                <b-button size="sm" @click="resetZoom(2)">üè†</b-button>
                            </b-col>
                        </b-row>
                        <b-form-select v-model="chartOptions[2].selectedX" :options="chartOptions[2].optionsX"
                            @change="updateGraph"></b-form-select>
                        <b-form-select v-model="chartOptions[2].selectedY" :options="chartOptions[2].optionsY"
                            @change="updateGraph"></b-form-select>
                    </b-col>
                    <b-col>
                        <b-row>
                            <b-col class="text-left">
                                <h5>Chart 4</h5>
                            </b-col>
                            <b-col class="text-right">
                                <b-button size="sm" @click="resetZoom(3)">üè†</b-button>
                            </b-col>
                        </b-row>
                        <b-form-select v-model="chartOptions[3].selectedX" :options="chartOptions[3].optionsX"
                            @change="updateGraph"></b-form-select>
                        <b-form-select v-model="chartOptions[3].selectedY" :options="chartOptions[3].optionsY"
                            @change="updateGraph"></b-form-select>
                    </b-col>
                </b-row>
            </b-container>
        </b-modal>
    </b-container>

    <div class="charts">
        <charts></charts>
    </div>


    <div class="container">
        <h2 style=" text-align: left; display: inline-block; width: 75%;  margin-left: 3%;">
            Log</h2>
        <div style=" float: right; margin-right: 3%;">
            <b-button @click="resetLog" variant="outline-warning">Clear</b-button>
        </div>
    </div>
    <div style=" float: left; margin-left: 3%;">
        <ul style="list-style-type:none;" id='messages'></ul>
    </div>
</div>

<script>
    Vue.component("charts", {
        template: `
    <div>
    <div id="chart-container1" style="height:20%;  padding:15px">
        <div style="float: left;   width: 45%; padding:10px; margin-left: 40px;">
            <canvas id="myChart0"></canvas>
        </div>
        <div style="float: right;   width: 45%; padding:10px; margin-right: 40px;">
            <canvas id="myChart1"></canvas>
        </div>
    </div>
    <div id="chart-container2" style="height:20%;  padding:15px">
        <div style="float: left;   width: 45%; padding:10px; margin-left: 40px;">
            <canvas id="myChart2"></canvas>
        </div>
        <div style="float: right;   width: 45%; padding:10px; margin-right: 40px;">
            <canvas id="myChart3"></canvas>
        </div>
    </div>
    </div>`,
        methods: {
            draw: function (options) {
                var defaultOptions = JSON.parse(options);
                for (var i in [...Array(4).keys()]) {
                    var ctx = document.getElementById('myChart' + i).getContext('2d');
                    var myChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            datasets: [{
                                data: [],
                            }],
                        },
                        options: {
                            elements: {
                                line: {

                                },
                                point: {

                                }
                            },
                            showLine: false,
                            scales: {
                                y: {
                                    title: {
                                        display: true
                                    }
                                },
                                x: {
                                    type: 'linear',
                                    title: {
                                        display: true
                                    },
                                    position: 'bottom',
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false
                                },
                                title: {
                                    display: true,
                                    text: 'Chart ' + (parseInt(i) + 1),
                                    padding: {
                                        top: 10,
                                        bottom: 30
                                    }
                                },
                                zoom: {
                                    pan: {
                                        enabled: true,
                                    },
                                    zoom: {
                                        wheel: {
                                            enabled: true,
                                        },
                                        pinch: {
                                            enabled: true
                                        },
                                        mode: 'xy',
                                    }
                                }
                            },
                            parsing: {
                                xAxisKey: 'time',
                                yAxisKey: 'temp'
                            }
                        },
                    });
                    renderGraphOptions(myChart, defaultOptions);
                    this.chartArray.push(myChart)
                }
            },
        },
        mounted() {
            this.draw(sessionStorage.settingOptions);
            globalChartArray = this.chartArray;
        },
        data() {
            return {
                chartArray: []
            }
        }

    });

    window.app = new Vue({
        el: '#app',
        mounted: function () {
            var d = document.getElementById("messages");
        },
        methods: {
            updateGraph(chart_ind, jsondata) {
                // check if chartOptions has been instantiated
                if (this.chartOptions[chart_ind] != undefined) {
                    if (this.chartOptions[chart_ind].selectedX != null && this.chartOptions[chart_ind].selectedY != null) {
                        renderGraph(globalChartArray[chart_ind], jsondata, this.chartOptions[chart_ind].selectedX, this.chartOptions[chart_ind].selectedY, chart_ind);
                    }
                }
            },
            resetGraph() {
                resetGraph = [true, true, true, true];
                socket.emit("reset-time");
            },
            saveOptions() {
                sessionStorage.settingOptions = JSON.stringify(this.settingOptions);
            },
            updateOptions() {
                var settingOptions = JSON.parse(sessionStorage.settingOptions);
                globalChartArray.forEach(function (chart) {
                    renderGraphOptions(chart, settingOptions);
                });
            },
            logout(event) {
                event.preventDefault();
                socket.emit("logged-out", '<%= email %>');
                window.location.href = "/users/logout";
            },
            log(message) {
                var item = document.createElement('li');
                const now = new Date();
                item.textContent = ['[', now.toUTCString(), '] ', message].join('');
                messages.appendChild(item);
                sessionStorage.logHtml = document.getElementById("messages").outerHTML;
            },
            resetLog() {
                sessionStorage.setItem('logHtml', "<ul id=\'messages\' style=\'list-style-type: none;\'></ul>");
                var d = document.getElementById("messages");
                d.outerHTML = sessionStorage.logHtml;
            },
        },
        data: {
            number: 'number',
            chartOptions: instantiateChartOptions(),
            lineStyleOptions: ['dashed', 'filled'],
            pointStyleOptions: ['circle', 'rect', 'rectRot', 'triangle'],
            settingOptions: {
                lineColor: '#B34E4F',
                pointColor: '#E56465',
                lineWidth: 3,
                pointRadius: 5,
                lineStyle: [],
                pointStyle: 'rect'
            },

        },
        computed: {
            showAlert() {
                return this.name.length > 4 ? true : false
            }
        }
    })
</script>