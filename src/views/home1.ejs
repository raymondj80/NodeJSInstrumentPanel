<script src="https://unpkg.com/vue@latest/dist/vue.js"></script>
<script src="https://unpkg.com/bootstrap-vue@latest/dist/bootstrap-vue.js"></script>
<script src='/socket.io/socket.io.js'></script>


<script>
    // update headers 
    function updateHeader(data) {
        for (var key in data) {
            // console.log(key);
            if (typeof data[key] === "number") {
                // round to 9 decimal places
                document.getElementById(key.concat('-header')).innerHTML = data[key].toFixed(9);
            }
            else {
                document.getElementById(key.concat('-header')).innerHTML = data[key];
            }
        };
    };

    const socket = io();
    socket.emit("logged-in");

    // On packet recieved update header/record functions
    socket.on('data', function (data) {
        updateHeader(data);
    });

    socket.on("start_script", function () {
        window.app.log("Script running...");
    });

    socket.on("script_recording", function (name) {
        window.app.log(`Writing data to ${name}...`);
    });

    socket.on("stop_script_recording", function (name) {
        window.app.log(`Stopped writing data to ${name}.`);
    });

    socket.on("stop_script", function (name) {
        window.app.log("Script finished.");
    });

    socket.on('returned_script_names', function (script_names) {
        window.app.options = script_names;
    })

    socket.on('returned_script', function (script) {
        window.app.my_script = script;
    })

    socket.on('finished_recording', function () {
        window.app.log('Finished manual recording.');
    })
</script>


<div id="app" class="app">


    <b-navbar toggleable="lg" type="dark" variant="dark">
        <b-collapse id="nav-collapse" is-nav>
            <b-navbar-nav>
                <b-nav-item href="/home1">Home</b-nav-item>
                <b-nav-item href="/graphs">Graphs</b-nav-item>
                <b-nav-item href="/gd">Google Drive</b-nav-item>
            </b-navbar-nav>

            <!-- Right aligned nav items -->
            <b-navbar-nav class="ml-auto">
                <b-nav-item-dropdown right>
                    <template #button-content>
                        <em>
                            <%= name %>
                        </em>
                    </template>
                    <b-nav-item @click="logout">Sign Out</b-nav-item>
                </b-nav-item-dropdown>
            </b-navbar-nav>
        </b-collapse>
    </b-navbar>

    <b-container class="my-container">
        <b-container class="b-jumbotron">
            <b-jumbotron header="Control Panel" lead="Node.js control panel for PPMS and SR860 Lock-in">
            </b-jumbotron>
        </b-container>

        <b-container class="data-row">
            <b-row class="text-left">
                <b-col style="white-space:nowrap">
                    <h4>Temperature: <span id='temp-header'></span></h4>
                    <h4>Vx1: <span id='Vx1-header'></span></h4>
                    <h4>Vx2: <span id='Vx2-header'></span></h4>
                </b-col>
                <b-col style="white-space:nowrap">
                    <h4>Temperature State: <span id='temp_state-header'></span></h4>
                    <h4>Vy1: <span id='Vy1-header'></span></h4>
                    <h4>Vy2: <span id='Vy2-header'></span></h4>
                </b-col>
                <b-col style="white-space:nowrap">
                    <h4>Field: <span id='field-header'></span></h4>
                    <h4>Frequency1: <span id='freq1-header'></span></h4>
                    <h4>Frequency2: <span id='freq2-header'></span></h4>
                </b-col>
                <b-col style="white-space:nowrap">
                    <h4>Field State: <span id='field_state-header'></span></h4>
                    <h4>Theta1: <span id='theta1-header'></span></h4>
                    <h4>Theta2: <span id='theta2-header'></span></h4>
                </b-col>
            </b-row>
        </b-container>

        <b-container class="build-script">
            <hr class="my-4">
            <div>
                <h2 style=" text-align: left; display: inline-block; width: 75%;  margin-right: -50%;">
                    Script
                </h2>
                <div style=" float: right; margin-left: -50%;">

                    <b-button-group>
                        <b-form-input v-model="my_script_name" placeholder="Enter filename"></b-form-input>
                        <b-button @click="saveScript" variant="outline-primary">Save</b-button>
                        <b-button v-b-modal.load-script-modal @click="getScriptNames" variant="outline-success">Load
                        </b-button>
                    </b-button-group>

                    <b-modal id="load-script-modal" title="Load Script">
                        <b-form-select v-model="selected_script" :options="options"></b-form-select>
                        <template #modal-footer="{load, cancel}">
                            <b-button size="sm" variant="success" @click="loadScript">
                                Load
                            </b-button>
                            <b-button size="sm" variant="danger" @click="cancel()">
                                Cancel
                            </b-button>
                        </template>
                    </b-modal>
                </div>
            </div>

            <b-form-textarea class="text-area" id="script" v-model="my_script" placeholder="Write script..." rows="10"
                max-rows="10">
            </b-form-textarea>
            <p class="run">
                <b-button @click="runScript" variant="outline-danger" class="d-block mr-0 ml-auto">Run</b-button>
            </p>
        </b-container>

        <b-container class="record-input">
            <hr class="my-4">
            <div>
                <h2 style=" text-align: left; display: inline-block; width: 75%;  margin-right: -50%;">
                    Record
                </h2>
                <div style=" float: right; margin-left: -50%;">

                    <b-button-group>
                        <b-form-input v-model="record_name" placeholder="Enter filename"></b-form-input>
                        <b-button @click="startManualRecord" variant="outline-success">Start</b-button>
                        <b-button @click="StopManualRecord" variant="outline-danger">Stop</b-button>
                    </b-button-group>
                </div>
            </div>
            <div>
                <b-form>
                    <b-input-group class="record-inputs">
                        <b-form-input id="record-time" v-model="time" type="text" placeholder="HH:mm:ss" required>
                        </b-form-input>
                    </b-input-group>
                </b-form>
            </div>
        </b-container>

        <b-container class="record-input2">
            <hr class="my-4">
            <div>
                <h2 style=" text-align: left; display: inline-block; width: 75%;  margin-right: -50%;">
                    Log</h2>
                <div style=" float: right; margin-left: -50%;">
                    <b-button @click="resetLog" variant="outline-warning">Clear</b-button>
                </div>
            </div>
            <ul style="list-style-type:none;" id='messages'></ul>
        </b-container>
    </b-container>

</div>

<script>
    window.app = new Vue({
        el: '#app',
        data: {
            name: '',
            time: '',
            my_script_name: '',
            record_name: '',
            my_script: '',
            selected_script: null,
            options: [],
        },
        mounted: function () {
            var d = document.getElementById("messages");
            d.outerHTML = sessionStorage.logHtml;
        },
        methods: {
            log(message) {
                var item = document.createElement('li');
                const now = new Date();
                item.textContent = ['[', now.toUTCString(), '] ', message].join('');
                messages.appendChild(item);
                sessionStorage.logHtml = document.getElementById("messages").outerHTML;
            },
            resetLog() {
                sessionStorage.setItem('logHtml', "<ul id=\'messages\' style=\'list-style-type: none;\'></ul>");
                var d = document.getElementById("messages");
                d.outerHTML = sessionStorage.logHtml;
            },
            startManualRecord(event) {
                event.preventDefault();
                time = this.time.split(':');
                converted_time = (+time[0] * 60 * 60 + +time[1] * 60 + +time[2] - 2); // -2 to account for cnt incrementing after first dataWriteCSV call
                socket.emit("start-manual-record", { time: converted_time, name: this.record_name });
                this.log(`Started manual recording for ${time[0]} hour(s) ${time[1]} minute(s) ${time[2]} second(s)...`);
            },
            StopManualRecord(event) {
                event.preventDefault()
                socket.emit("stop-manual-record");
                this.log("Stopped manual recording.");
            },
            saveScript(event) {
                event.preventDefault();
                socket.emit("save-script", { name: this.my_script_name, data: this.my_script });
            },
            getScriptNames(event) {
                event.preventDefault();
                socket.emit("get-script-names");
            },
            loadScript(event) {
                event.preventDefault();
                this.$root.$emit('bv::hide::modal', 'load-script-modal');
                this.my_script_name = this.selected_script;
                socket.emit("get-script", this.selected_script);
            },
            runScript(event) {
                event.preventDefault();
                socket.emit("run-script", this.my_script_name);
            },
            logout(event) {
                event.preventDefault();
                socket.emit("logged-out");
                window.location.href = "/users/logout";
            }
        },
        computed: {
            showAlert() {
                return this.name.length > 4 ? true : false
            }
        }
    })
</script>